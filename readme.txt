This folder contains the code used to process the data from our experiments with methane and chlorine radicals.

The actual plotting happens within the _combined_plots subdirectory. The plotting only operates on intermediate log files stored in _exported_data, with rare exception where raw time series data are plotted.

There are several sub-directories containing the data from different experimental campaigns. A campaign is a few weeks of experiments.
The logfiles in each campaign are generated by our data acquisition software (implemented with the PyOpticon software package) that gathers readings from a number of different sensors, control devices, and gas analyzers. They can be viewed directly with Excel, but we mainly use Python scripts to process them.

In some cases, there are log files for the MKS FTIR spectrometer as well (.prn files); these are present where we retroactively reprocessed the raw FTIR spectra using a different FTIR processing recipe from the one that was in use during the experiment, whose values are stored in the PyOpticon .csv logfile. This was done to ensure that the same FTIR recipe was applied to all of our experiments.

Shared Python packages used to process the data and plot the results of the campaigns are stored in _shared_packages. After each campaign, a Jupyter notebook is created to process the raw log files into intermediate files. The notebooks to do this are named 'MM-DD_process_cl2_data.ipynb' and use scripts from the shared process_cl2_logfile.py package. In the notebook, for each experiment logfile, templated code is used to identify when in the log file the light on / light off cycles occurred, then automatically extract data like the methane and chlorine conversions and the carbon dioxide and carbon monoxide production. The notebook generates various plots to help the user verify visually that the data extraction proceeded correctly. The results are stored in the _exported_data folder in intermediate results files titled 'conversions_MM-DD_...', one for each campaign, with each row corresponding to one light on/light off cycle. The other intermediate files, titled 'bypasses_MM-DD_...', contain all logged values but only during selected parts of each light-on period, with metadata so that they can be matched to the corresponding entry in the conversions results file.

Plots are generated using data from those stored intermediate files. Another package, cl2_utilities.py, contains tools to do so. In addition to several plotting helpers, cl2_utilities contains code to combine the noise of the original readings (stored in the intermediate results files) and information on the accuracy of our gas analyzers, sensors, and flow controllers (stored in cl2_utilities.py) to generate 95% confidence intervals for CH4 and Cl2 conversion and CO, CO2, and CH2O production. 

The distinction between the two helper packages is that process_cl2_logfile.py operates only on the raw log files. Once the intermediate files are generated using process_cl2_logfile.py, they are generally not re-created, and the intermediate files contain everything needed to  easily create plots on CH4/Cl2 conversions, efficiencies, and products as functions of various things without needing to refer to the original log file. The contents of cl2_utilities are meant to be called as part of generating plots from the intermediate results files. It was kept separate so that, after extracting the log file data once, the script would never need to be re-run even if we changed the type of data we wanted to query, an assumed value like the accuracy of a given instrument, or a value from our notes. Rather, those values are set and manipulated in cl2_utilities and in the final plotting scripts.

This code could have been structured in many different ways; we've just found that this structure made for a fairly efficient workflow with respect to both quick initial data visialization for our own use and to more polished data visualization for presentations and our manuscript.
